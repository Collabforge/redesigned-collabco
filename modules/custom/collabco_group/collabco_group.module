<?php

/**
 * @file
 * Collabco Group module.
 */

/**
 * Implements hook_menu().
 */
function collabco_group_menu() {
  $items = array();
  $items['node/%node/add/member'] = array(
    'title' => 'Add a member',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('collabco_group_add_user_form', 1),
    'access callback' => 'collabco_group_add_user_access',
    'access arguments' => array(1),
  );
  return $items;
}

/**
 * Implementation of form for adding users to a group.
 */
function collabco_group_add_user_form($form, &$form_state, $node) {
  module_load_include('inc', 'og_ui', 'og_ui.admin');
  $form = og_ui_add_users($form, $form_state, 'node', $node->nid);
  $form['og_user']['roles']['#access'] = FALSE;
  $form['membership_fields']['og_membership_request']['#access'] = FALSE;
  $form['og_user']['name']['#title'] = "Start typing a name or email";
  return $form;
}

/**
 * Validate handler; Add users to group.
 */
function collabco_group_add_user_form_validate($form, &$form_state) {
  og_ui_add_users_validate($form, $form_state);
}

/**
 * Submit handler; Add users to group.
 */
function collabco_group_add_user_form_submit($form, &$form_state) {
  og_ui_add_users_submit($form, $form_state);
}

/**
 * Access check for form collabco_group_add_user_form.
 */
function collabco_group_add_user_access($node) {
  if (!og_is_group('node', $node)) {
    return FALSE;
  }
  $gid = $node->nid;
  $is_group_admin = og_user_access('node', $gid, 'administer group');
  if (user_access('administer group') || og_user_access('node', $gid, 'add user')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_og_membership_update().
 */
function collabco_group_og_membership_update(OgMembership $og_membership) {
  // Group Type must be node and enity type must be user.
  if ($og_membership->group_type != 'node' || $og_membership->entity_type != 'user') {
    return;
  }
  $gid = $og_membership->gid;
  $uid = $og_membership->etid;
  _collabco_group_og_membership_update($gid, $uid);
}

/**
 * Implements hook_og_membership_insert().
 */
function collabco_group_og_membership_insert(OgMembership $og_membership) {
  // Group Type must be node and enity type must be user.
  if ($og_membership->group_type != 'node' || $og_membership->entity_type != 'user') {
    return;
  }
  $gid = $og_membership->gid;
  $uid = $og_membership->etid;
  _collabco_group_og_membership_update($gid, $uid);

}

/**
 * Function to grant admin role if node is created by him.
 */
function _collabco_group_og_membership_update($gid, $uid) {
  $node = node_load($gid);
  if ($node->uid == $uid) {
    _collabco_group_role_admin_grant($gid, $uid);
  }
}

/**
 * Function to retrieve grant adminsitrator role.
 */
function _collabco_group_role_admin_grant($gid, $uid) {
  $rid = _collabco_group_get_rid_by_role_name($gid, OG_ADMINISTRATOR_ROLE);
  og_role_grant('node', $gid, $uid, $rid);
}

/**
 * Function to retrieve role id based on role name.
 */
function _collabco_group_get_rid_by_role_name($gid, $role_name) {
  $node = node_load($gid);
  $roles = og_roles('node', $node->type, $gid);
  foreach ($roles as $_rid => $_rname) {
    if ($_rname == $role_name) {
      return $_rid;
    }
  }
}
