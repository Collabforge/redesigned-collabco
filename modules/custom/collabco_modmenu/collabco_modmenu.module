<?php

/**
 * Implements hook_enable().
 */
function collabco_modmenu_enable() {
  variable_set('admin_theme','collabco_theme');
  user_role_change_permissions(3,
    array(
      'access administration menu' => FALSE,
    )
  );
}

/**
 * Implements hook_enable().
 */
function collabco_modmenu_disable() {
  variable_set('admin_theme','seven');
  user_role_change_permissions(3,
    array(
      'access administration menu' => TRUE,
    )
 );
}


/**
 * Implements hook_theme().
 */
function collabco_modmenu_theme($existing, $type, $theme, $path) {
  return array(
    'header_mm_standard_template' => array(
      'template' => 'header-mm-standard-block-template',
      'variables' => array(),
    ),
    'dashboard_template' => array(
      'template' => 'dashboard-template',
      'variables' => array(),
    ),
    'create_template' => array(
      'template' => 'create-template',
      'variables' => array(),
    ),
    'edit_template' => array(
      'template' => 'edit-template',
      'variables' => array(),
    ),
    'view_template' => array(
      'template' => 'view-template',
      'variables' => array(),
    ),
    'settings_template' => array(
      'template' => 'settings-template',
      'variables' => array(),
    ),
  );
}

function collabco_modmenu_block_info() {
  $blocks = array();
  $blocks['header_mm_standard'] = array(
    'info' => t('Collabco Moderator Menu Header block'),
    'region' => 'content_top',
    'pages' => "moderator/*\nnode/add/*\nadmin/*",
    'status' => TRUE,
    'visibility' => BLOCK_VISIBILITY_LISTED
  );
  $blocks['modmenu_user_link'] = array(
    'info' => t('Moderator menu user link block'),
    'region' => 'nav_actions',
    'status' => TRUE,
    'weight' => -1,
  );
  return $blocks;
}

function collabco_modmenu_block_view($delta = '') {
  $block = array();
  $variables = array();
  switch ($delta) {
    case 'header_mm_standard':
        // Ensure moderator menu doesn't show for role 1 (anon) or 2 (auth) users.
        global $user;
        if(user_has_role(3) XOR $user->uid == 1) {
          $content = theme('header_mm_standard_template', $variables);
        } else {$content = "";}
      break;

      case 'modmenu_user_link':
        // Ensure moderator menu doesn't show for role 1 (anon) or 2 (auth) users.
        global $user;
        if(user_has_role(3) XOR $user->uid == 1) {
          $content = "<a href='".url('moderator/dashboard')."'><i class='icon-setting-1'>&nbsp;</i> <b>Moderator Dashboard</b></a>";
        } else {$content = "";}
      break;
  }
  $block['content'] = $content;
  return $block;
}

/**
 * Implements hook_menu().
 */
function collabco_modmenu_menu() {

  $items['moderator/dashboard'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => t('Moderator Dashboard'),
    'description' => 'Moderator Dashboard',
    'page callback' => 'collabco_modmenu_mod_dashboard',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );
  $items['moderator/create'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => t('Moderator Create'),
    'description' => 'Moderator Create',
    'page callback' => 'collabco_modmenu_mod_create',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );
  $items['moderator/edit'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => t('Moderator Edit'),
    'description' => 'Moderator Edit',
    'page callback' => 'collabco_modmenu_mod_edit',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );
  $items['moderator/view'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => t('Moderator View'),
    'description' => 'Moderator View',
    'page callback' => 'collabco_modmenu_mod_view',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );
  $items['moderator/settings'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => t('Moderator Settings'),
    'description' => 'Moderator Settings',
    'page callback' => 'collabco_modmenu_mod_settings',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Page callback.
 */
function collabco_modmenu_mod_dashboard() {
  $variables = array();
  $content = theme('dashboard_template', $variables);
  // ... do something and add to $content;
  return $content;
}

/**
 * Page callback.
 */
function collabco_modmenu_mod_create() {
  $content = '

  ';
  // ... do something and add to $content;
  return $content;
}

/**
 * Page callback.
 */
function collabco_modmenu_mod_edit() {
  $content = '

  ';
  // ... do something and add to $content;
  return $content;
}

/**
 * Page callback.
 */
function collabco_modmenu_mod_view() {
  $content = '

  ';
  // ... do something and add to $content;
  return $content;
}

/**
 * Page callback.
 */
function collabco_modmenu_mod_settings() {
  $content = '

  ';
  // ... do something and add to $content;
  return $content;
}

/**
 * Implements hook_form_alter().
 */
function collabco_modmenu_form_alter(&$form, $form_state, $form_id) {
   switch ($form_id) {
    case 'views_form_sending_mass_mail_page':
      $form['recipient']['#default_value'] = '[user:mail]';
      $form['recipient']['#access'] = FALSE;
      $form['message']['#description'] ='The message that should be sent. You may include placeholders like [user:field_full_name], to represent data that will be different each time message is sent.';
        
      $form['#submit'][] = 'collabco_modmenu_redirect_handler';
      break;
  }
}

