<?php
/**
 * @file
 * Collabco Settings module.
 */

/**
 * Implements hook_boot().
 */
function collabco_settings_init() {
  if(!variable_get('csl_challenges')) {variable_set('csl_challenges', 'challenge');}
  if(!variable_get('csl_ideas')) {variable_set('csl_ideas', 'idea');}
  if(!variable_get('csl_collaborations')) {variable_set('csl_collaborations', 'collaboration');}
  if(!variable_get('csl_support')) {variable_set('csl_support', 'support');}
  if(!variable_get('csl_unsupport')) {variable_set('csl_unsupport', 'unsupport');}
  if(!variable_get('csl_follow')) {variable_set('csl_follow', 'follow');}
  if(!variable_get('csl_unfollow')) {variable_set('csl_unfollow', 'unfollow');}
  if(!variable_get('csl_share')) {variable_set('csl_share', 'share');}
  if(!variable_get('csl_sponsor')) {variable_set('csl_sponsor', 'sponsor');}

}

/**
 * Implements handy rendering tool.
 * $value = the label in variable_get (see hook_init)
 * $suffix = 0 for no change, 1 will add "s", anything else is custom suffix
 * $uc = 0 for no change, 1 for uppercase_first, 2 for uppercase_all
 */
function csl($value, $suffix = 0, $uc = 0) {
  // Fix for accidental singular-usage instead of plural usage of terms
  if ($value == "idea" || $value == "collaboration" || $value == "challenge") {
    $value = $value.'s';
  }

  $val = variable_get('csl_'.$value);

  switch ($suffix) {
    case '0':
      break;

    case '1':
      $val = $val.'s';
      break;

    default:
      $val = $val.$suffix;
      break;
  }

  switch ($uc) {
    case 1:
      $val = ucfirst($val);
      break;

    case 2:
      $val = strtoupper($val);
      break;
  }

  return $val;
}

/**
 * Implements hook_variable_group_info().
 */
function collabco_settings_variable_group_info() {
  $groups['collabco_labels_settings'] = array(
    'title' => t('Labels'),
    'description' => t('Collabco Labels settings'),
    'access' => 'administer site configuration',
    'path' => array('admin/config/collabco-settings/labels'),
  );
  $groups['collabco_challenge_settings'] = array(
    'title' => t('Collabco Challenge'),
    'description' => t('Collabco Challenge settings'),
    'access' => 'administer site configuration',
    'path' => array('admin/config/collabco-settings/challenge'),
  );
  $groups['collabco_collaboration_settings'] = array(
    'title' => t('Collabco collaboration'),
    'description' => t('Collabco Collaboration settings'),
    'access' => 'administer site configuration',
    'path' => array('admin/config/collabco-settings/collaboration'),
  );
  return $groups;
}

/**
 * Implements hook_variable_info().
 */
function collabco_settings_variable_info($options) {
  $variable['collabco_inactivity_period_collab'] = array(
    'title' => t('Select the period to check for inactivity within ') . csl('collaboration',1,1) ,
    'description' => t('Select the period to check for inactivity within ') . csl('collaboration',1,1) .' for notifying community moderators',
    'type' => 'select_number',
    'default' => 30,
    'group' => 'collabco_collaboration_settings',
    'options' => array(1, 5, 10, 15, 20, 25, 30, 35, 40, 50, 60, 80,
      90, 100, 150, 200, 250, 300, 350, 400, 500,
    )
    ,
  );
  $variable['collabco_inactivity_archived_period_collab'] = array(
    'title' => t('Select the period to check for inactivity within ') . csl('collaboration',1,1) . ' for archiving',
    'description' => t('Select the period to check for inactivity within '). csl('collaboration',1,1) .' for archiving &  notification',
    'type' => 'select_number',
    'default' => 90,
    'group' => 'collabco_collaboration_settings',
    'options' => array(1, 5, 10, 15, 20, 25, 30, 35, 40, 50, 60, 80,
      90, 100, 150, 200, 250, 300, 350, 400, 500,
    )
    ,
  );
  $variable['collabco_ongoing_challenge'] = array(
    'title' => 'Select the on-going or miscellaneous ' . csl('challenge',0,1),
    'type' => 'select',
    'default' => 1,
    'group' => 'collabco_challenge_settings',
    'options callback' => 'challenge_list',
  );
  return $variable;
}

/**
 * Function to return the challenges list.
 */
function challenge_list() {
  $options = array();
  $vocabulary = taxonomy_vocabulary_machine_name_load('challenge');
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
  foreach ($terms as $term) {
    $options[$term->tid] = $term->name;
  }
  return $options;
}

/**
 * Implements hook_menu().
 */
function collabco_settings_menu() {
  $items['admin/config/collabco-settings'] = array(
    'title' => 'Collabco Settings',
    'description' => 'Collabco Custom Settings',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/collabco-settings/challenge'] = array(
    'title' => 'Challenge Settings',
    'description' => 'Challenge Settings for Collabco',
    'access arguments' => array(TRUE),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('variable_group_form', 'collabco_challenge_settings'),
  );
  $items['admin/config/collabco-settings/collaboration'] = array(
    'title' => 'Collaboration Settings',
    'description' => 'Collaboration Settings for Collabco',
    'access arguments' => array(TRUE),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('variable_group_form', 'collabco_collaboration_settings'),
  );
  $items['admin/config/collabco-settings/labels'] = array(
    'title' => 'Labels Settings',
    'description' => 'Labels Settings for Collabco',
    'access arguments' => array(TRUE),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('collabco_settings_labels_admin_form'),
  );

  return $items;

}

/**
 * Form builder for changing labels.
 */
function collabco_settings_labels_admin_form() {
  $form = array();
  // $form['collabco_disable_defaultcontent_notice_enabled'] = array(
  //   '#type' => 'checkbox',
  //   '#title' => t('Display a notice about default content'),
  //   '#default_value' => variable_get('collabco_settings_labels_tick', 1),
  // );

  $form['csl_challenges'] = array(
    '#type' => 'textfield',
    '#title' => t('Label for Challenges'),
    '#default_value' => variable_get('csl_challenges', 'challenge'),
    '#description' => t('Original: challenge'),
    '#required' => TRUE,
  );
  $form['csl_ideas'] = array(
    '#type' => 'textfield',
    '#title' => t('Label for Ideas'),
    '#default_value' => variable_get('csl_ideas', 'idea'),
    '#description' => t('Original: idea'),
    '#required' => TRUE,
  );
  $form['csl_collaborations'] = array(
    '#type' => 'textfield',
    '#title' => t('Label for Collaborations'),
    '#default_value' => variable_get('csl_collaborations', 'collaboration'),
    '#description' => t('Original: collaboration'),
    '#required' => TRUE,
  );
  $form['csl_support'] = array(
    '#type' => 'textfield',
    '#title' => t('Label for Support'),
    '#default_value' => variable_get('csl_support', 'support'),
    '#description' => t('Original: support'),
    '#required' => TRUE,
  );
  $form['csl_unsupport'] = array(
    '#type' => 'textfield',
    '#title' => t('Label for unsupport'),
    '#default_value' => variable_get('csl_unsupport', 'unsupport'),
    '#description' => t('Original: unsupport'),
    '#required' => TRUE,
  );
  $form['csl_follow'] = array(
    '#type' => 'textfield',
    '#title' => t('Label for Follow'),
    '#default_value' => variable_get('csl_follow', 'follow'),
    '#description' => t('Original: follow'),
    '#required' => TRUE,
  );
  $form['csl_unfollow'] = array(
    '#type' => 'textfield',
    '#title' => t('Label for unfollow'),
    '#default_value' => variable_get('csl_unfollow', 'unfollow'),
    '#description' => t('Original: unfollow'),
    '#required' => TRUE,
  );
  $form['csl_share'] = array(
    '#type' => 'textfield',
    '#title' => t('Label for Share'),
    '#default_value' => variable_get('csl_share', 'share'),
    '#description' => t('Original: share'),
    '#required' => TRUE,
  );
  $form['csl_sponsor'] = array(
    '#type' => 'textfield',
    '#title' => t('Label for Sponsor'),
    '#default_value' => variable_get('csl_sponsor', 'sponsor'),
    '#description' => t('Original: sponsor'),
    '#required' => TRUE,
  );
  $form['#submit'][] = 'collabco_settings_labels_admin_form_submit';
  $form['#reset'][] = 'collabco_settings_labels_admin_form_submit';
  return system_settings_form($form);
}

/**
 * Handles changing labels
 */
function collabco_settings_labels_admin_form_submit($form, &$form_state) {
  $menu_paths = array('challenge','collaborate');
  foreach ($menu_paths as $menu_item) {
    $mlids = db_query("SELECT mlid FROM {menu_links} WHERE link_path = :menu_item AND menu_name = 'main-menu'", array(':menu_item' => $menu_item))->fetchCol();
    if ($mlids) {
      foreach ($mlids as $mlid) {
        if ($menu_link = menu_link_load($mlid)) {  
          if ($menu_link['link_path'] == 'challenge' && !empty($form_state['values']['csl_challenges'])) {
            $menu_link['link_title'] = $form_state['values']['csl_challenges'];
          } 
          if ($menu_link['link_path'] == 'collaborate' && !empty($form_state['values']['csl_collaborations'])){
            $menu_link['link_title'] = $form_state['values']['csl_collaborations'];
          } 
        menu_link_save($menu_link);
      }    
    }
  }
}
menu_rebuild();
drupal_flush_all_caches();
}

/**
 * Implements hook_help().
 */
function collabco_settings_help($path, $arg) {
  switch ($path) {
    case "admin/help#collabco_settings":
      return '<p>' . t("Collabco Setting") . '</p>';
  }
}

/**
 * CKEditor plugins.
 */
function collabco_settings_ckeditor_plugin() {
  $module_path = drupal_get_path('module', 'collabco_settings');
  $plugins = array();
  $plugins['confighelper'] = array(
    'name'    => 'confighelper',
    'desc'    => t('CKEditor: Configuration helper plugin'),
    'path'    => $module_path . '/ckeditor-plugins/confighelper/',
    'default' => 't',
  );
  return $plugins;
}





/**
* Implements hook_token_info().
*/
function collabco_settings_token_info() {
  $info['tokens']['variable']['follow'] = array(
    'name' => t('variable follow'),
    'description' => t('Returns the changed label for Follow'),
  );
  $info['tokens']['variable']['unfollow'] = array(
    'name' => t('variable unfollow'),
    'description' => t('Returns the changed label for unfollow'),
  );
  $info['tokens']['variable']['support'] = array(
    'name' => t('variable support'),
    'description' => t('Returns the changed label for Support'),
  );
  $info['tokens']['variable']['unsupport'] = array(
    'name' => t('variable unsupport'),
    'description' => t('Returns the changed label for unsupport'),
  );
  $info['tokens']['variable']['idea'] = array(
    'name' => t('variable idea'),
    'description' => t('Returns the changed label for Ideas'),
  );
  $info['tokens']['variable']['challenge'] = array(
    'name' => t('variable challenge'),
    'description' => t('Returns the changed label for Challenges'),
  );
  $info['tokens']['variable']['collaboration'] = array(
    'name' => t('variable collaboration'),
    'description' => t('Returns the changed label for Collaborations'),
  );  
  return $info;
}


/* Now we need to actually return the contents (or replacement value) of this token and
 * this is done in the hook_tokens():
*/

/**
* Implements hook_tokens().
*/
function collabco_settings_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
    if ($type == 'variable') {
      foreach ($tokens as $name => $original) {
        switch ($name) {
          case 'follow':
            $name = csl('follow');
            $replacements[$original] = $name;
            break;
          case 'unfollow':
            $name = csl('unfollow');
            $replacements[$original] = $name;
            break;  
          case 'support':
            $name = csl('support');
            $replacements[$original] = $name;
            break;
          case 'unsupport':
            $name = csl('unsupport');
            $replacements[$original] = $name;
            break;  
          case 'idea':
            $name = csl('ideas');
            $replacements[$original] = $name;
            break;
          case 'challenge':
            $name = csl('challenges');
            $replacements[$original] = $name;
            break;
          case 'collaboration':
            $name = csl('collaborations');
            $replacements[$original] = $name;
            break;

      }
    }
  }

  return $replacements;
}

