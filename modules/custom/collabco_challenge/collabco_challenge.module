<?php

/**
 * @file
 * Collabco challenge module.
 */

/**
 * Implements hook_theme().
 */
function collabco_challenge_theme($existing, $type, $theme, $path) {
  return array(
    'header_standard_template' => array(
      'template' => 'header-standard-block-template',
      'variables' => array(),
    ),
    'header_challenge_template' => array(
      'template' => 'header-challenge-block-template',
      'variables' => array(),
    ),
    'add_to_brainstorm_template' => array(
      'template' => 'add-to-brainstorm-template',
      'variables' => array(),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function collabco_challenge_block_info() {
  $blocks = array();
  $blocks['header_challenge'] = array(
    'info' => t('Collabco Challenge Header block'),
    'region' => 'content_top',
    'pages' => 'challenge',
    'visibility' => 1,
    'status' => TRUE,
  );
  $blocks['add_to_brainstorm'] = array(
    'info' => t('Collabco Challenge - Adding idea to Brainstorm block'),
    'region' => 'content_bottom',
    'pages' => 'challenge',
    'visibility' => 1,
    'status' => TRUE,
  );
  $blocks['header_standard'] = array(
    'info' => t('Collabco Standard Header block'),
    'region' => 'content_top',
    'pages' => 'open-challenges\n closed-challenges\n archived-ideas\n help\n about\n idea-supporters/*',
    'visibility' => 1,
    'status' => TRUE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function collabco_challenge_block_view($delta = '') {
  $block = array();
  $variables = array();
  switch ($delta) {
    case 'header_standard':
      if (arg(0) == 'open-challenges') {
        $variables['title'] = 'Open '.csl('challenges',1,1);
        $variables['sub_title'] = 'Respond to the challenge';
        $variables['icon_class'] = 'icon-flag';
      }
      elseif (arg(0) == 'closed-challenges') {
        $variables['title'] = 'Closed '.csl('challenges',1,1);
        $variables['sub_title'] = 'Respond to the challenge';
        $variables['icon_class'] = 'icon-flag';
      }
      elseif (arg(0) == 'archived-ideas') {
        $variables['title'] = 'Archived '.csl('ideas',1,1);
        $variables['sub_title'] = '';
        $variables['icon_class'] = 'icon-diamond';
      }
      elseif (arg(0) == 'idea-supporters') {
        $variables['title'] = csl('ideas',0,1).' '.csl('support','ers',1);
        $variables['sub_title'] = '';
        $variables['icon_class'] = 'icon-diamond';
      }
      elseif (arg(0) == 'node' && is_numeric(arg(1))) {
        $node_id = intval(arg(1));
        // For help page.
        $path_alias =  drupal_get_path_alias('node/' . $node_id);
        if ($path_alias == 'help') {
          $variables['title'] = 'Help';
          $variables['sub_title'] = '';
          $variables['icon_class'] = 'icon-squares';
        }
        // For About us page.
        elseif ($path_alias == 'about') {
          $variables['title'] = 'About';
          $variables['sub_title'] = '';
          $variables['icon_class'] = 'icon-squares';
        }
      }
      $content = theme('header_standard_template', $variables);
      break;

    case 'header_challenge':
      $content = theme('header_challenge_template', $variables);
      break;

    case 'add_to_brainstorm':
      $on_going_challenge_tid = variable_get('collabco_ongoing_challenge','1');
      $term = taxonomy_term_load($on_going_challenge_tid);
      $term_uri = taxonomy_term_uri($term);
      $term_title = taxonomy_term_title($term);
      $term_path = $term_uri['path'];
      $variables['on_going_challenge_url'] = drupal_get_path_alias($term_path);
      $variables['on_going_challenge_name'] = $term_title;
      $content = theme('add_to_brainstorm_template', $variables);
      break;
  }
  $block['content'] = $content;
  return $block;
}

/**
 * Get the count of supports on challenges.
 */
function collabco_challenge_get_count_supports() {
  $query = db_select('flag', 'f');
  $query->join('flag_counts', 'fc', 'f.fid = fc.fid');
  $result = $query
    ->fields('fc', array('count'))
    ->condition('f.name', 'support_challenge', '=')
    ->execute();
  $total_count = 0;
  foreach ($result as $n) {
    $total_count = $total_count + $n->count;
  }
  return $total_count;
}

/**
 * Get the count of supports on challenges.
 */
function collabco_challenge_get_count_follows() {
  $query = db_select('flag', 'f');
  $query->join('flag_counts', 'fc', 'f.fid = fc.fid');
  $result = $query
    ->fields('fc', array('count'))
    ->condition('f.name', 'challenge_flag', '=')
    ->execute();
  $total_count = 0;
  foreach ($result as $n) {
    $total_count = $total_count + $n->count;
  }
  return $total_count;
}

/**
 * Returns TRUE if today is within the Challenge's start and end dates.
 */
function collabco_challenge_is_open($term_or_tid) {
  $term = is_numeric($term_or_tid) ? taxonomy_term_load($term_or_tid) : $term_or_tid;
  if (!$term || empty($term->field_start_date[LANGUAGE_NONE][0])) {
    return FALSE;
  }
  $date_range = $term->field_start_date[LANGUAGE_NONE][0];
  $now = time();
  if (empty($date_range['value2'])) {
    return $now > $date_range['value'];
  }
  return ($now > $date_range['value']) && ($now < $date_range['value2']);
}

/**
 * Function to return in how many days the Challenge ends.
 *
 * Applies only to open challenges. Returns a negative number, if closed.
 */
function collabco_challenge_days_left($term_or_tid) {
  $term = is_numeric($term_or_tid) ? taxonomy_term_load($term_or_tid) : $term_or_tid;
  if (!$term || empty($term->field_start_date[LANGUAGE_NONE][0])) {
    return FALSE;
  }
  $date_range = $term->field_start_date[LANGUAGE_NONE][0];
  $now = time();
  if ($now < $date_range['value'] || empty($date_range['value2'])) {
    // Challenge isn't open yet or is open-ended.
    return FALSE;
  }
  $days = ($date_range['value2'] - $now) / (24 * 60 * 60);
  return round($days);
}

/**
 * Returns whether a Challenge term is in the judging state.
 *
 * "Judging" means that the current time is after the Challenge closing date AND
 * there are no winning ideas.
 *
 * @param mixed $term_or_tid
 *   Takes term or tid.
 */
function collabco_challenge_is_judging($term_or_tid) {
  $term = is_numeric($term_or_tid) ? taxonomy_term_load($term_or_tid) : $term_or_tid;
  if (!$term || empty($term->field_start_date[LANGUAGE_NONE][0])) {
    return FALSE;
  }
  $date_range = $term->field_start_date[LANGUAGE_NONE][0];
  if (!empty($date_range['value2']) && time() > $date_range['value2']) {
    // Challenge has closed. Does it have any winning ideas?
    return collaboco_challenge_winning_ideas($term) == 0;
  }
  return FALSE;
}

/**
 * Return the number of winning ideas for the supplied taxonomy term.
 *
 * @param mixed $term_or_tid
 *   Takes term or tid.
 *
 * @return int
 *   $count
 */
function collaboco_challenge_winning_ideas($term_or_tid) {
  $tid = is_numeric($term_or_tid) ? $term_or_tid : $term_or_tid->tid;
  $conditions = array(
    'type' => 'idea',
  );
  $ideas = node_load_multiple(FALSE, $conditions);
  $count = 0;
  foreach ($ideas as $idea) {
    if (isset($idea->field_challenge_value[LANGUAGE_NONE][0]) && $idea->field_challenge_value[LANGUAGE_NONE][0]['tid'] == $tid &&
      isset($idea->field_idea_state[LANGUAGE_NONE])) {
      $idea_states = $idea->field_idea_state[LANGUAGE_NONE];
      if (is_array($idea_states)){
        foreach ($idea_states as $key => $value) {
          if ($value['value'] == 'win'){
            $count++;
          }
        }
      }
    }
  }
  return $count;
}


/**
 * Returns whether Challenge is Brainstorm.
 */
function collabco_challenge_is_brainstorm($term_or_tid) {
  $tid = is_numeric($term_or_tid) ? $term_or_tid : $term_or_tid->tid;
  $on_going_challenge = variable_get('collabco_ongoing_challenge','0');
  return $tid == $on_going_challenge;
}

/**
 * Adds status string.
 */
function collabco_challenge_status_string($term_or_tid) {
  if (collabco_challenge_is_brainstorm($term_or_tid)) {
    return t('Ongoing');
  }
  $days_left = collabco_challenge_days_left($term_or_tid);
  if ($days_left !== FALSE && $days_left >= 0) {
    $label = t('Open');
  }
  elseif (collabco_challenge_is_judging($term_or_tid)) {
    $label = t('Judging');
  }
  else {
    $label = t('Closed');
  }
  return $label;
}

/**
 * Implements hook_views_api().
 */
function collabco_challenge_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'collabco_challenge') . '/views',
  );
}

/**
 * Implements hook_form_alter().
 */
function collabco_challenge_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'taxonomy_form_term':
      $form['field_tag_line'][LANGUAGE_NONE]['0']['value']['#attributes']['placeholder'] = t('This is key information about your '.csl('challenges',0,1).' which will appear as the summary across the site. Try to have the most important information at the front for the maximum visibility and to encourage uses to support or click through to your challenge to read more.');
       $form['field_start_date']['#pre_render'] = array('collabco_challenge_date_label');
      break;
  }
}

/**
 * Implements hook_date_label().
 */
function collabco_challenge_date_label($element) {
  $element[LANGUAGE_NONE][0]['show_todate']['#title'] = t('Fixed end date (untick for ongoing/unending '.csl("challenges",1,1).')');

  return $element;
}
