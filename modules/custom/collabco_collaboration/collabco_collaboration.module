<?php
/**
 * @file
 * Collabco collaboration module.
 */

/**
 * Implements hook_cron().
 */
function collabco_collaboration_cron() {
  if (_collabco_check_to_run()) {

    $collab_inactivity_count = 30;
    if (is_numeric(variable_get('collabco_inactivity_period_collab'))) {
      $collab_inactivity_count = intval(variable_get('collabco_inactivity_period_collab'));
    }
    $collab_inactivity_archived_count = 90;
    if (is_numeric(variable_get('collabco_inactivity_archived_period_collab'))) {
      $collab_inactivity_archived_count = intval(variable_get('collabco_inactivity_archived_period_collab'));
    }
    $collab_list = _collabco_check_inactivity($collab_inactivity_count);
    if (count($collab_list) > 0) {
      $new_mailing_collabs = array();
      $last_inactivity_list = variable_get('collabco_collab_inactivity_list', array());
      if (is_array($last_inactivity_list)) {
        foreach ($collab_list as $collab) {
          if (!in_array($collab, $last_inactivity_list)) {
            $new_mailing_collabs[] = $collab;
          }
        }
      }
      else {
        $new_mailing_collabs = $collab_list;
      }
      variable_set('collabco_collab_inactivity_list', $collab_list);
      if (count($new_mailing_collabs) > 0) {
        _collabco_send_inactivity_mail($new_mailing_collabs, 'collabco_inactivity');
      }
    }
    $collab_list = _collabco_check_inactivity($collab_inactivity_archived_count);
    if (count($collab_list) > 0) {
      _collabco_archived($collab_list);
    }
    $now = $_SERVER['REQUEST_TIME'];
    variable_set('collabco_collab_archived_cron_last', $now);
  }
}

/**
 * Function for archived or inactive.
 */
function _collabco_archived($collab_list) {
  foreach ($collab_list as $nid) {
    $node = node_load($nid);
    if (isset($node)) {
      $node_wrapper = entity_metadata_wrapper('node', $node);
      $node_wrapper->field_parked_collaboration->set(1);
      $node_wrapper->save();
    }
  }
  _collabco_send_inactivity_mail($collab_list, 'collabco_archived');
}

/**
 * Function to retrieve the moderators and call drupal mail function.
 */
function _collabco_send_inactivity_mail($new_mailing_collabs, $key) {
  $users = collabco_collaboration_get_admins();

  $language = NULL;
  $from = variable_get('site_mail');
  $params = array();
  $params['collaborations'] = $new_mailing_collabs;

  global $base_url;
  $collab_text = "";
  foreach ($new_mailing_collabs as $nid) {
    $node = node_load($nid);
    $node_url = "$base_url/node/$nid";
    $collab_text = $collab_text . "<br>" . l($node->title, $node_url);
  }
  $params['!collab_text'] = $collab_text;
  foreach ($users as $user) {
    if (!empty($user->field_full_name[LANGUAGE_NONE][0])) {
      $params['!username'] = $user->field_full_name[LANGUAGE_NONE][0]['value'];
    }
    $message = drupal_mail('collabco_collaboration', $key, $user->mail, $language, $params, $from);
  }
}

/**
 * Function to check whether to run the collaboration inactivity cron or not.
 */
function _collabco_check_to_run() {
  $now = $_SERVER['REQUEST_TIME'];
  global $conf;
  if (isset($conf['collabco_collab_archived_cron_last'])) {
    $last_run = variable_get('collabco_collab_archived_cron_last');
    $datediff = abs($now - $last_run);
    $days_in_between = floor($datediff / (60 * 60 * 24));
    if ($days_in_between > 0) {
      return TRUE;
    }
  }
  else {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_mail().
 *
 * Called by drupal_mail(), which is invoked in the functions above.
 */
function collabco_collaboration_mail($key, &$message, $params) {
  $t_vars = $params;
  $language = $message['language'];
  $message['from_name'] = variable_get('site_name', 'Collabco IMS');

  if ($key == 'collabco_inactivity') {
    $message['subject'] .= _collabco_collabortaion_mail_text('collabco_inactivity_subject', $language, $t_vars);
    $message['body'][]   = _collabco_collabortaion_mail_text('collabco_inactivity_body', $language, $t_vars);
  }
  elseif ($key == 'collabco_archived') {
    $message['subject'] .= _collabco_collabortaion_mail_text('collabco_archived_subject', $language, $t_vars);
    $message['body'][]   = _collabco_collabortaion_mail_text('collabco_archived_body', $language, $t_vars);
  }

}

/**
 * Returns email subject or body, as selected by the supplied key.
 */
function _collabco_collabortaion_mail_text($key, $language = NULL, $t_vars = array()) {

  $langcode = isset($language) ? $language->language : NULL;

  switch ($key) {
    case 'collabco_inactivity_subject':
       $text = t(csl('collaborations',1,1).' with no activity for last 30 days at [site:name]', $t_vars, array('langcode' => $langcode));
      break;

    case 'collabco_inactivity_body':
      $text = t("
<p>Hello <span style='font-weight: bold;'>!username</span>,</p>

<p>The below ".csl('collaborations',1,1)." have had no activity for the last 30 days.</p>

<p>!collab_text</p>

<p>-- The Innovation Team at [site:name]</p>


",
        $t_vars, array('langcode' => $langcode));
      break;

    case 'collabco_archived_subject':
      $text = t(csl('collaborations',1,1).' archived with no activity for last 90 days at [site:name]', $t_vars, array('langcode' => $langcode));
      break;

    case 'collabco_archived_body':
      $text = t("
<p>Hello <span style='font-weight: bold;'>!username</span>,</p>

<p>The below ".csl('collaborations',1,1)." are now archived due to no activity for the last 90 days.</p>

<p>!collab_text</p>

<p>-- The Innovation Team at [site:name]</p>

",
        $t_vars, array('langcode' => $langcode));
      break;
  }
  $options = array('language' => $language, 'sanitize' => FALSE);
  return token_replace($text, $t_vars, $options);
}

/**
 * Returns the list of users that have permissions to administer groups.
 */
function collabco_collaboration_get_admins() {
  $query = db_select('role_permission', 'rp');
  $query->join('users_roles', 'ur', 'rp.rid = ur.rid');
  $result = $query
    ->fields('ur', array('uid'))
    ->condition('rp.permission', 'administer group', '=')
    ->execute()->fetchAll();
  $users = array();
  foreach ($result as $record) {
    $users[$record->uid] = user_load($record->uid);
  }
  return $users;
}

/**
 * To get the list of collaboration with no activity for that period.
 */
function _collabco_check_inactivity($period) {
  $collab_list = _collabco_get_collabs();
  $collab_inactivity = array();
  foreach ($collab_list as $collab_id) {
    $collab = node_load($collab_id);
    $last_edited_diff = _collabco_days_in_between($collab->changed);
    if ($last_edited_diff > $period) {
      $last_comment_timestamp = _collabco_last_comment_updated($collab->nid);
      if ($last_comment_timestamp == 0 || _collabco_days_in_between($last_comment_timestamp) > $period) {
        if (_collabco_collab_content_inactivity($collab->nid, $period)) {
          $collab_inactivity[] = $collab->nid;
        }
      }
    }
  }
  return $collab_inactivity;
}

/**
 * To retrieve the last comment updated date of that node.
 */
function _collabco_collab_content_inactivity($nid, $period) {
  $inactivity = TRUE;
  $og_memberships = _collabco_get_group_content($nid);
  foreach ($og_memberships as $og_membership) {
    if (_collabco_days_in_between($og_membership->created) < $period) {
      return FALSE;
    }
  }
  foreach ($og_memberships as $og_membership) {
    if ($og_membership->entity_type == 'node') {
      $node = node_load($og_membership->etid);
      if (isset($node)) {
        if (_collabco_days_in_between($node->changed) < $period) {
          return FALSE;
        }
        elseif ($node->type == 'conversation') {
          $last_comment_timestamp = _collabco_last_comment_updated($node->nid);
          if ($last_comment_timestamp != 0 && _collabco_days_in_between($last_comment_timestamp) < $period) {
            return FALSE;
          }
        }
      }
    }
  }
  return $inactivity;
}

/**
 * To retrieve the last comment updated date of that node.
 */
function _collabco_get_group_content($nid) {
  $og_membership_list = array();
  $query = db_select('og_membership', 'og_m');
  $result = $query
    ->fields('og_m', array('created', 'entity_type', 'etid'))
    ->condition('state', '1', '=')
    ->condition('gid', $nid, '=')
    ->execute();
  foreach ($result as $og_m) {
    $og_membership = new stdClass();
    $og_membership->etid = $og_m->etid;
    $og_membership->created = $og_m->created;
    $og_membership->entity_type = $og_m->entity_type;
    $og_membership_list[] = $og_membership;
  }
  return $og_membership_list;
}

/**
 * To retrieve the last comment updated date of that node.
 */
function _collabco_last_comment_updated($nid) {
  $last_comment_updated = 0;
  $query = db_select('comment', 'c');
  $result = $query
    ->fields('c', array('changed'))
    ->condition('status', '1', '=')
    ->condition('nid', $nid, '=')
    ->orderBy('changed', 'DESC')
    ->range(0, 1)
    ->execute();
  foreach ($result as $c) {
    $last_comment_updated = $c->changed;
  }
  return $last_comment_updated;
}

/**
 * To retrieve the last comment updated date of that node.
 */
function _collabco_get_collabs() {
  $collab = array();
  $query = db_select('node', 'n');
  $query->join('field_data_field_parked_collaboration', 'pc', 'n.nid = pc.entity_id');
  $result = $query
    ->fields('n', array('nid'))
    ->condition('status', '1', '=')
    ->condition('type', 'hub', '=')
    ->condition('field_parked_collaboration_value', '0', '=')
    ->execute();
  foreach ($result as $n) {
    $collab[] = $n->nid;
  }
  return $collab;
}

/**
 * To find the difference in days between two timestamps.
 *
 * @param string $start
 *   Param Comment.
 * @param string $end
 *   Param Comment.
 */
function _collabco_days_in_between($start, $end = NULL) {
  if ($end == NULL) {
    $end = $_SERVER['REQUEST_TIME'];
  }
  $datediff = abs($end - $start);
  $days_in_between = floor($datediff / (60 * 60 * 24));
  return $days_in_between;
}

/**
 * Implements hook_theme().
 */
function collabco_collaboration_theme($existing, $type, $theme, $path) {
  return array(
    'header_collaborate_template' => array(
      'template' => 'header-collaborate-block-template',
      'variables' => array('complete_data' => NULL),
    ),
    'header_featured_collaborations_template' => array(
      'template' => 'header-featured-collaborations-template',
      'variables' => array('complete_data' => NULL),
    ),
    'header_turned_collaborations_template' => array(
      'template' => 'header-turned-collaborations-template',
      'variables' => array('complete_data' => NULL),
    ),
    'header_parked_collaborations_template' => array(
      'template' => 'header-parked-collaborations-template',
      'variables' => array('complete_data' => NULL),
    ),
    'how_to_start_collaborate_template' => array(
      'template' => 'how-to-start-collaborate-template',
      'variables' => array('complete_data' => NULL),
    ),
    'collaboration_likes_block' => array(
      'variables' => array(),
      'template' => 'collaboration_likes_block',
    ),
    'collaboration_challenge_block' => array(
      'variables' => array(),
      'template' => 'collaboration_challenge_block',
    ),
    'collaboration_team_block' => array(
      'variables' => array(),
    ),
    'single_collaboration_header_block' => array(
      'variables' => array(),
      'template' => 'single_collaboration_header_block',
    ),
    'single_collaboration_breadcrumb_block' => array(
      'variables' => array(),
      'template' => 'single-collaboration-breadcrumb-block',
    ),
    'single_collab_add_discussion_block' => array(
      'variables' => array(),
      'template' => 'single-collab-add-discussion-block',
    ),
    'single_collab_add_document_block' => array(
      'variables' => array(),
      'template' => 'single-collab-add-document-block',
    ),
    'single_collab_actions_template' => array(
      'variables' => array(),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function collabco_collaboration_block_info() {
  $blocks = array();
  $blocks['edit_collaboration'] = array(
    'info' => t('Collabco Edit collaboration block'),
    'region' => 'sidebar_second_top',
    'pages' => 'node/*',
    'visibility' => 1,
    'status' => TRUE,
  );
  $blocks['header_collaboration'] = array(
    'info' => t('Collabco Collaborate Header block'),
    'region' => 'content_top',
    'pages' => 'collaborate',
    'visibility' => 1,
    'status' => TRUE,
  );
  $blocks['how_to_start_collaborate'] = array(
    'info' => t('Collabco Collaborate - How to start collaboration block'),
    'region' => 'content_bottom',
    'pages' => 'collaborate',
    'visibility' => 1,
    'status' => TRUE,
  );
  $blocks['challenge'] = array(
    'info' => t('Challenge belonging to Collaboration'),
    'region' => 'sidebar_second',
    'pages' => 'node/*',
    'visibility' => 1,
    'status' => TRUE,
    'weight' => 0,
  );
  $blocks['likes'] = array(
    'info' => t('Like this collaboration?'),
    'region' => 'sidebar_second',
    'pages' => 'node/*',
    'visibility' => 1,
    'status' => TRUE,
    'weight' => 1,
  );
  $blocks['team'] = array(
    'info' => t('Team'),
    'region' => 'sidebar_second',
    'pages' => 'node/*',
    'visibility' => 1,
    'status' => TRUE,
    'weight' => 5,
  );
  $blocks['single_collaboration_header'] = array(
    'info' => t('Single Collaborate page header'),
    'region' => 'full_width_top',
    'pages' => 'node/*',
    'visibility' => 1,
    'status' => TRUE,
    'weight' => 1,
  );
  $blocks['single_collaboration_breadcrumb'] = array(
    'info' => t('Single Collaborate page breadcrumb'),
    'region' => 'content_upper',
    'pages' => 'node/*',
    'visibility' => 1,
    'status' => TRUE,
    'weight' => 1,
  );
  $blocks['single_collab_add_discussion'] = array(
    'info' => t('Single Collaborate page - Add Discussion block'),
    'region' => 'sidebar_second',
    'pages' => 'node/*/discussions',
    'visibility' => 1,
    'status' => TRUE,
    'weight' => 1,
  );
  $blocks['single_collab_add_document'] = array(
    'info' => t('Single Collaborate page - Add Document block'),
    'region' => 'sidebar_second',
    'pages' => 'node/*/documents',
    'visibility' => 1,
    'status' => TRUE,
    'weight' => 1,
  );
  $blocks['single_collab_actions'] = array(
    'info' => t('Single Collaborate page - Actions block'),
    'region' => 'sidebar_second',
    'pages' => 'node/*',
    'visibility' => 1,
    'status' => TRUE,
    'weight' => 1,
  );
  $blocks['header_featured_collaborations'] = array(
    'info' => t('Featured Collaborations page - Header block'),
    'region' => 'content_top',
    'pages' => 'featured-collaborations',
    'visibility' => 1,
    'status' => TRUE,
    'weight' => 1,
  );
  $blocks['header_turned_collaborations'] = array(
    'info' => t('Turned Projects Collaborations page - Header block'),
    'region' => 'content_top',
    'pages' => 'collaborations-turned-projects',
    'visibility' => 1,
    'status' => TRUE,
    'weight' => 1,
  );
  $blocks['header_parked_collaborations'] = array(
    'info' => t('Parked Collaborations page - Header block'),
    'region' => 'content_top',
    'pages' => 'parked-collaborations',
    'visibility' => 1,
    'status' => TRUE,
    'weight' => 1,
  );
  $blocks['ctags'] = array(
    'info' => t('Co-Lab tags'),
    'region' => 'sidebar_second',
    'pages' => 'node/*',
    'visibility' => 1,
    'status' => TRUE,
    'weight' => 10,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function collabco_collaboration_block_view($delta = '') {
  $block = array();
  if ((!($node = collabco_collaboration_is_collaboration_node())) &&
      (!($node = collabco_collaboration_is_part_of_collaboration())) &&
      ((arg(0) != 'collaborate') &&
       (arg(0) != 'featured-collaborations') &&
       (arg(0) != 'collaborations-turned-projects') &&
       (arg(0) != 'parked-collaborations'))) {

    return $block;
  }
  if ($node = node_load(arg(1))) {
    $nid = $node->nid;
  }
  $variables = array();
  if ($delta == 'single_collab_add_discussion' || $delta == 'single_collab_add_document') {
    global $user;
    $account = user_load($user->uid);
    // Check if the  current user belongs to the collaboration.
    if (og_is_member('node', $nid, 'user', $account) == FALSE) {
      return $block;
    }
  }
  switch ($delta) {
    case 'header_collaboration':
      $supports_count = collabco_collaboration_get_count_supports();
      $follows_count = collabco_collaboration_get_count_follows();
      $variables['supports_count'] = $supports_count;
      $variables['follows_count'] = $follows_count;
      $block['content'] = theme('header_collaborate_template', $variables);
      break;

    case 'header_featured_collaborations':
      $block['content'] = theme('header_featured_collaborations_template', $variables);
      break;

    case 'header_turned_collaborations':
      $block['content'] = theme('header_turned_collaborations_template', $variables);
      break;

    case 'header_parked_collaborations':
      $block['content'] = theme('header_parked_collaborations_template', $variables);
      break;

    case 'how_to_start_collaborate':
      $block['content'] = theme('how_to_start_collaborate_template', $variables);
      break;

    case 'edit_collaboration':
      if (arg(2) == NULL && $node->type == 'hub') {
        if (user_access('administer group') or og_user_access('node', $nid, 'administer group')) {
          $edit_collab_url = "/node/$nid/edit";
          $output = "<div><ul class='btn btn-actions'><li>" . l(t("Edit the ".csl('collaborations',0,1)), $edit_collab_url, array('attributes' => array('class' => 'btn btn-default icon-pencil'))) . "</li></ul></div>";
          $block['content'] = $output;
        }
      }
      break;

    case 'likes':
      if (arg(2) == NULL && $node->type == 'hub') {
        $counts = flag_get_counts('node', $nid);
        $uid = $node->uid;
        $node_author = user_load($uid);
        $user_flags = flag_get_user_flags('node', $node->nid);
        $follow_flag  = FALSE;
        $support_flag = FALSE;
        if (array_key_exists('follow_collaboration', $user_flags)) {
          $follow_flag = TRUE;
        }
        if (array_key_exists('support_collaboration', $user_flags)) {
          $support_flag = TRUE;
        }
        $variables = array(
          'nid'      => $nid,
          'collaboration_title' => $node->title,
          'top_bar1' => 'Cb',
          'top_bar2' => t(csl('collaborations',0,1)),
          'title'   => t('Like this '.csl('collaboration',0,1).'?'),
          'support' => empty($counts['support_collaboration']) ? 0 : $counts['support_collaboration'],
          'follow'  => empty($counts['follow_collaboration']) ? 0 : $counts['follow_collaboration'],
          'share_link'   => url(drupal_get_path_alias('node/' . $node->nid), array('absolute' => TRUE)),
          'mail'    => $node_author->mail,
          'support_flag' => $support_flag,
          'follow_flag' => $follow_flag,
        );
        $block['subject'] = $variables['title'];
        $block['content'] = theme('collaboration_likes_block', $variables);
      }
      break;

    case 'team':
      if (arg(2) == NULL && $node->type == 'hub') {
        $variables['nid'] = $node->nid;
        $block['subject'] = t('The team');
        $block['content'] = theme('collaboration_team_block', $variables);
      }
      break;

    case 'ctags':
      $block['subject'] = t('Collaboration tags');
      $display = array('label' => 'hidden');
      $block['content'] = field_view_field('node', $node, 'field_tags', $display);
      break;

    case 'challenge':
      if (arg(2) == NULL && $node->type == 'hub') {
        if (isset($node->field_idea[LANGUAGE_NONE][0]['entity'])) {
          $idea = $node->field_idea[LANGUAGE_NONE][0]['entity'];
          $variables['idea_link'] = l($idea->title, drupal_get_path_alias('node/' . $idea->nid));
          if (isset($idea->field_challenge_value[LANGUAGE_NONE][0])) {
            if ($term = taxonomy_term_load($idea->field_challenge_value[LANGUAGE_NONE][0]['tid'])) {
              $variables['challenge_link'] = l($term->name, 'taxonomy/term/' . $term->tid);
              $block['subject'] = t('Challenge');
              $block['content'] = theme('collaboration_challenge_block', $variables);
            }
          }
        }
      }
      break;

    case 'single_collaboration_header':
      // For discussion and document.
      if ($node->type != 'hub' && (!empty($node->og_group_ref))) {
        $gid = $node->og_group_ref['und'][0]['target_id'];
        $node = node_load($gid);
        $nid = $gid;
      }
      $counts = flag_get_counts('node', $nid);

      if (!empty($node->field_featured_hub_image[LANGUAGE_NONE])) {
        $image = reset($node->field_featured_hub_image[LANGUAGE_NONE]);
        // Commented: $url = image_style_url('large', $image['uri']);.
        $wrapper = file_stream_wrapper_get_instance_by_uri($image['uri']);
        $url = $wrapper->getExternalUrl();
      }

      $variables = array(
        'nid' => $nid,
        'title' => '<none>',
        'image' => empty($url) ? '' : $url,
        'collaborate' => $node->title,
        'short' => truncate_utf8($node->field_tag_line[LANGUAGE_NONE][0]['value'], 100, TRUE, TRUE),
        'support' => empty($counts['support_collaboration']) ? 0 : $counts['support_collaboration'],
        'comments' => $node->comment_count,
        'follow' => empty($counts['follow_collaboration']) ? 0 : $counts['follow_collaboration'],
      );
      $block['subject'] = $variables['title'];
      $block['content'] = theme('single_collaboration_header_block', $variables);
      break;

    case 'single_collaboration_breadcrumb':
      // For discussion and document.
      if ($node->type != 'hub' && (!empty($node->og_group_ref))) {
        $gid = $node->og_group_ref['und'][0]['target_id'];
        $group_node = node_load($gid);
        $group_path_alias = drupal_get_path_alias('node/' . $gid);
        $variables = array(
          'nid' => $gid,
          'title' => '<none>',
          'collaborate'   => l($group_node->title, $group_path_alias) ,
          'group_content_title' => $node->title,
        );
      }
      else {
        $variables = array(
          'nid' => $nid,
          'title' => '<none>',
          'collaborate'   => $node->title,
        );
      }
      $block['subject'] = $variables['title'];
      $block['content'] = theme('single_collaboration_breadcrumb_block', $variables);
      break;

    case 'single_collab_add_discussion':
      $variables['nid'] = $node->nid;
      $block['content'] = theme('single_collab_add_discussion_block', $variables);
      break;

    case 'single_collab_add_document':
      $variables['nid'] = $node->nid;
      $block['content'] = theme('single_collab_add_document_block', $variables);
      break;

    case 'single_collab_actions':
      if (arg(2) == NULL && $node->type == 'hub') {
        $variables['nid'] = $node->nid;
        $block['content'] = theme('single_collab_actions_template', $variables);
      }
      break;
  }

  return $block;
}

/**
 * Theme Implementation of single_collab_actions_template.
 */
function theme_single_collab_actions_template(&$variables) {
  $gid = $variables['nid'];
  $links = array();
  $links[] = array(
    'href' => sprintf('collaboration-supporters/%d', $gid)
    , 'title' => 'View '.csl("collaboration",0,1) . ' ' . csl('support','ers')
    , 'classes' => array()
    ,
  );
  $attributes = array('class' => array('nav', 'nav-tabs'));
  $variables['links'] = $links;
  $output = theme('links', array(
    'links' => $links,
    'attributes' => $attributes,
  ));
  return $output;
}

/**
 * Returns HTML for the team block.
 *
 * @ingroup themeable
 */
function theme_collaboration_team_block($variables = array()) {
  // Execute the View that returns name, title and picture of all members
  // belonging to this Idea (group).
  $gid = $variables['nid'];
  $output = views_embed_view('team_belonging_to_collaboration', 'default', $variables['nid']);
  if (user_access('administer group') || og_user_access('node', $gid, 'add user')) {
    $add_member_url = "node/$gid/add/member";
    $link_output = "<div class='add-team-member'>" . l(t("Add a Team Member"), $add_member_url, array('attributes' => array('class' => 'btn btn-default'))) . "</div>";
    $output = $output . $link_output;
  }
  return $output;
}

/**
 * Is node a collaboration?
 */
function collabco_collaboration_is_collaboration_node() {
  if (arg(0) !== 'node') {
    return;
  }
  $node = node_load(arg(1));
  return ($node && $node->type === 'hub') ? $node : FALSE;
}

/**
 * Is node part of collaboration?
 */
function collabco_collaboration_is_part_of_collaboration() {
  if (arg(0) !== 'node') {
    return;
  }
  $node = node_load(arg(1));
  return ($node && ($node->type === 'conversation' || $node->type === 'knowledge_object')) ? $node : FALSE;
}

/**
 * Get the count of supports on collaborations.
 */
function collabco_collaboration_get_count_supports() {
  $query = db_select('flag', 'f');
  $query->join('flag_counts', 'fc', 'f.fid = fc.fid');
  $result = $query
    ->fields('fc', array('count'))
    ->condition('f.name', 'support_collaboration', '=')
    ->execute();
  $total_count = 0;
  foreach ($result as $n) {
    $total_count = $total_count + $n->count;
  }
  return $total_count;
}

/**
 * Get the count of supports on collaborations.
 */
function collabco_collaboration_get_count_follows() {
  $query = db_select('flag', 'f');
  $query->join('flag_counts', 'fc', 'f.fid = fc.fid');
  $result = $query
    ->fields('fc', array('count'))
    ->condition('f.name', 'follow_collaboration', '=')
    ->execute();
  $total_count = 0;
  foreach ($result as $n) {
    $total_count = $total_count + $n->count;
  }
  return $total_count;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function template_preprocess_single_collaboration_breadcrumb_block(&$variables) {
  $current_node = node_load(arg(1));
  // For documents & discussions.
  if ($current_node->type != 'hub' && (!empty($current_node->og_group_ref))) {
    $gid = $current_node->og_group_ref['und'][0]['target_id'];
    $current_node = node_load($gid);
  }
  /* Added extra classes on desktop links for guided tour */
  $links = array(
    'ui-collaboration-menu ui-menu-collaboration-info collab-info' => array(
      'title' => 'Information',
      'href' => sprintf('node/%s', $current_node->nid),
    ),
    'ui-collaboration-menu ui-menu-collaboration-discussion collab-discussion' => array(
      'title' => 'Discussion',
      'href' => sprintf('node/%s/discussions', $current_node->nid),
    ),
    'ui-collaboration-menu ui-menu-collaboration-documents collab-documents' => array(
      'title' => 'Documents',
      'href' => sprintf('node/%s/documents', $current_node->nid),
    ),
  );
  $mobile_links = array(
    'ui-collaboration-menu ui-menu-collaboration-info' => array(
      'title' => 'Information',
      'href' => sprintf('node/%s', $current_node->nid),
    ),
    'ui-collaboration-menu ui-menu-collaboration-discussion' => array(
      'title' => 'Discussion',
      'href' => sprintf('node/%s/discussions', $current_node->nid),
    ),
    'ui-collaboration-menu ui-menu-collaboration-documents' => array(
      'title' => 'Documents',
      'href' => sprintf('node/%s/documents', $current_node->nid),
    ),
  );
  $attributes = array('class' => array('nav', 'nav-tabs'));
  $variables['links'] = theme('links', array(
    'links' => $links,
    'attributes' => $attributes,
  ));
  $variables['mobile_links'] = theme('links', array(
    'links' => $mobile_links,
    'attributes' => $attributes,
  ));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function collabco_collaboration_form_conversation_node_form_alter(&$form, &$form_state) {
  $gid = intval(arg(3));
  if (!empty($gid)) {
    $lang = LANGUAGE_NONE;
    $form['og_group_ref'][$lang]['#default_value'][] = arg(3);
  }
  $form['og_group_ref']['#access'] = FALSE;
  array_unshift($form['#submit'], 'collabco_collaboration_form_conversation_node_form_submit');
}

/**
 * Implements submit handler for converation node form.
 */
function collabco_collaboration_form_conversation_node_form_submit($form, &$form_state) {
  $gid = intval(arg(3));
  if (!empty($gid)) {
    $form_state['values']['og_group_ref'][LANGUAGE_NONE][0]['target_id'] = $gid;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function collabco_collaboration_form_knowledge_object_node_form_alter(&$form, &$form_state) {
  $gid = intval(arg(3));
  if (!empty($gid)) {
    $lang = LANGUAGE_NONE;
    $form['og_group_ref'][$lang]['#default_value'][] = $gid;
  }
  $form['og_group_ref']['#access'] = FALSE;
  array_unshift($form['#submit'], 'hub_actions_form_knowledge_object_node_form_submit');
}

/**
 * Implements submit handler for knowledge object node form.
 */
function hub_actions_form_knowledge_object_node_form_submit($form, &$form_state) {
  $gid = intval(arg(3));
  if (!empty($gid)) {
    $form_state['values']['og_group_ref'][LANGUAGE_NONE][0]['target_id'] = $gid;
  }
}
