<?php

/**
 * Collabco installation 
 **/

/**
 * Define a default theme constant
 */
define('GOVIMS_DEFAULT_THEME', 'collabco_theme');

/**
 * Define the admin theme.
 */
define('GOVIMS_DEFAULT_ADMIN_THEME', 'seven');

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function collabco_install() {

  $revert = array('collabco_appearance_feature','basic_page_feature','collabco_core_feature','collabco_challenge_feature','collabco_ideas_feature','collabco_collaboration_feature','collabco_myhub_feature','collabco_views_feature','collabco_message_feature');
  _govims_features_revert($revert);

   // Set default front-end and admin themes.
  _govims_set_default_themes();
  
  // // Setup some default blocks.
   _govims_default_blocks();
   
   _govims_setup_user(); 
 
  // Clean up after install.
  collabco_cleanup();
}

/**
 * Returns a list of the themes that govIMS supports.
 */
function govims_supported_themes() {
  return array(
    GOVIMS_DEFAULT_THEME,
  );
}

function _govims_setup_user() {

  $theme_path = drupal_get_path('theme', variable_get('theme_default', NULL));
  $source_file = $theme_path."/assets/img/avatar-blank.jpg";
  $destination_file = "sites/default/files/pictures/avatar-blank.jpg";  
  
  mkdir(dirname($destination_file), 0777, true);
  $result = copy($source_file, $destination_file);
    
  // Setting up the full name for User 1
   $account = user_load(1);
   $full_name = array();
   $full_name[LANGUAGE_NONE][0][value] = "Admin User";
  
   $edit = array(
   'field_full_name' => $full_name,
   );
   user_save($account, $edit);
}

/**
 * Set default themes.
 */
function _govims_set_default_themes() {
  // Any themes without keys here will get numeric keys and so will be enabled,
  // but not placed into variables.
  //
  // The install_state data is discarded after the last core install task, so
  // we set install_profile specifically to ensure that drupal_get_profile()
  // returns the correct profile name and finds the profile themes.
   $enable = array(
    'theme_default' => GOVIMS_DEFAULT_THEME,
    'admin_theme' => GOVIMS_DEFAULT_ADMIN_THEME,
    'install_profile' => 'collabco',
   );
  theme_enable($enable);

  foreach ($enable as $var => $theme) {
    if (!is_numeric($var)) {
      variable_set($var, $theme);
    }
  }

  // Disable the default Bartik & default admin theme.
 
  theme_disable(array('bartik'));
}

/**
 * Reverts a list of features.
 */
function _govims_features_revert($modules) {
  module_load_include('inc', 'features', 'features.export');
  features_include();
  foreach ($modules as $module) {
    if (($feature = feature_load($module, TRUE)) && module_exists($module)) {
      $components = array();
      // Forcefully revert all components of a feature.
      foreach (array_keys($feature->info['features']) as $component) {
        if (features_hook($component, 'features_revert')) {
          $components[] = $component;
        }
      }
    }
    foreach ($components as $component) {
      features_revert(array($module => array($component)));
    }
  }
}


/**
 * Setup some default blocks.
 */
function _govims_default_blocks() {
  // Get all the govCMS supported themes.
  $themes = govims_supported_themes();

  // Set default system block in primary theme.
  collabco_core_insert_block('system', 'main', $themes, 'content', -12);
  collabco_core_insert_block('system', 'help', $themes, 'content', -14);

  // Set home page blocks
  collabco_core_update_block('collabco_home', 'header_home', $themes, 'content_top', 0);
  collabco_core_update_block('collabco_profile', 'header_user_profile_block', $themes, 'nav_actions', 0);
  collabco_core_update_block('search', 'form', $themes, 'nav_search', 0);
    
  // Open challenges block on home page
  collabco_core_update_block('views', '3ae42aa206ab98b6a1a3d7b5e905e19d', $themes, 'content_upper', 14);
  
  //footer 
  collabco_core_update_block('collabco_home', 'footer', $themes, 'footer-1-col', 1);
  collabco_core_update_block('collabco_home', 'privacy', $themes, 'footer-2-col', 1);
  
  //Challenge page 
  collabco_core_update_block('collabco_challenge', 'header_challenge', $themes, 'content_top', 0);
  collabco_core_update_block('collabco_challenge', 'add_to_brainstorm', $themes, 'content_middle', 0);
  collabco_core_update_block('views', 'closed_challenges-block', $themes, 'content_bottom', 0);
  collabco_core_update_block('views', 'archieved_ideas-block', $themes, 'content_bottom', 10);
 
   
  //individual Challenge page
  collabco_core_update_block('views', 'challenge_page_header-block', $themes, 'full_width_top', 0);
  
  collabco_core_update_block('views', 'latest_ideas-block', $themes, 'content_lower', 14);
  
  //winning ideas belonging to a challenge
  collabco_core_update_block('views', 'af1a856ad23ecaccfd1929ab5b2d5c15', $themes, 'content_middle', 0);
  

  //ideas belonging to a challenge
  collabco_core_update_block('views', '8057de6ae37fa6fb676e14c306088c3f', $themes, 'content_middle', 10);
  
  //myhub page
  collabco_core_update_block('collabco_myhubs', 'header_myhubs', $themes, 'content_top', -40);
  collabco_core_update_block('collabco_myhubs', 'myhub_links', $themes, 'content_upper', -41);
  
  //myhub updates
  collabco_core_update_block('views', '2b14d775fef07b47e68c4e559319dd47', $themes, 'content', 14);
  
  collabco_core_update_block('quicktabs', 'my_hub_ideas', $themes, 'content', 14);
  
  collabco_core_update_block('quicktabs', 'my_hub_collaborations', $themes, 'content', 14);
  
   //Idea page
  collabco_core_update_block('collabco_idea', 'single_idea_header', $themes, 'full_width_top', -40);
  collabco_core_update_block('collabco_idea', 'single_idea_breadcrumb', $themes, 'content_upper', -41);
  collabco_core_update_block('collabco_idea', 'promote', $themes, 'sidebar_second_top', 0);
  collabco_core_update_block('collabco_idea', 'collaborations', $themes, 'sidebar_second', 10);
  

  
  //collaboration 
  collabco_core_update_block('collabco_collaboration', 'header_collaboration', $themes, 'content_top', 0);
  collabco_core_update_block('collabco_collaboration', 'how_to_start_collaborate', $themes, 'content_lower', 0);
  collabco_core_update_block('views', '258f84be4390f5316a10e6602678fbf9', $themes, 'content_bottom', 0);
  collabco_core_update_block('views', 'a574482833f737364236dac3d79883d5', $themes, 'content_bottom', 10);
  

  //collaboration individual page
  collabco_core_update_block('collabco_collaboration', 'single_collaboration_header', $themes, 'full_width_top', 0);
  collabco_core_update_block('collabco_collaboration', 'single_collaboration_breadcrumb', $themes, 'content_upper', 0);
  collabco_core_update_block('collabco_collaboration', 'edit_collaboration', $themes, 'sidebar_second_top', 0);
  collabco_core_update_block('collabco_collaboration', 'challenge', $themes, 'sidebar_second',-10);
  
  // Set some blocks in the admin theme.
 // collabco_core_insert_block('system', 'main', GOVIMS_DEFAULT_ADMIN_THEME, 'content');
  //collabco_core_insert_block('system', 'help', GOVIMS_DEFAULT_ADMIN_THEME, 'help');
  
 
}

/**
 * Implements hook_install_tasks().
 */
function collabco_install_tasks($install_state) {
  $task = array();

  $govims_example_content_batch = variable_get('collabco_example_content_batch', FALSE);

  $task['collabco_install_additional_options'] = array(
    'display_name' => st('Additional options'),
    'display' => TRUE,
    'type' => 'form',
    'run' => INSTALL_TASK_RUN_IF_NOT_COMPLETED,
  );
  $task['collabco_example_content_install'] = array(
    'display_name' => st('Example content'),
    'display' => FALSE,
    'type' => 'batch',
    'run' => $govims_example_content_batch ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
  );
  $task['collabco_cleanup'] = array(
    'display_name' => st('Finish'),
    'display' => FALSE,
    'type' => 'normal',
    'run' => INSTALL_TASK_RUN_IF_NOT_COMPLETED,
  );

  return $task;
}
// local callback function
function _govims_locale_selection(&$install_state){
    $install_state['parameters']['locale'] = 'en';
}

/**
 * Implements hook_install_tasks_alter().
 */
function collabco_install_tasks_alter(&$tasks, $install_state) {

  $tasks['install_select_locale']['function'] = '_govims_locale_selection';

  $tasks['collabco_finished'] = $tasks['install_finished'];
  unset($tasks['install_finished']);

  _collabco_set_theme('collabco_theme');
   drupal_add_css('profiles/collabco/css/install.css');
   drupal_add_js('profiles/collabco/js/jquery-3.1.0.min.js');
   
}

/**
 * Overrides the core install_finished.
 */
function collabco_finished() {
  $theme_path = drupal_get_path('theme', 'collabco_theme'); 
  
  drupal_set_title(st('@drupal installation complete', array('@drupal' => drupal_install_profile_distribution_name())), PASS_THROUGH);
  $messages = drupal_set_message();
  $output = '<p>' . st('Congratulations, you installed @drupal!', array('@drupal' => drupal_install_profile_distribution_name())) . '</p>';
  $output .= '<p>' . (isset($messages['error']) ? st('Review the messages above before visiting <a href="@url">your new site</a>.', array('@url' => url(''))) : st('<a href="@url" class="button">Visit your new site</a>', array('@url' => url('')))) . '</p>';

  // Flush all caches to ensure that any full bootstraps during the installer
  // do not leave stale cached data, and that any content types or other items
  // registered by the installation profile are registered correctly.

  variable_set('features_rebuild_on_flush', FALSE);
  drupal_flush_all_caches();

  // Remember the profile which was used.
  variable_set('install_profile', drupal_get_profile());

  // Installation profiles are always loaded last.
  db_update('system')
    ->fields(array('weight' => 1000))
    ->condition('type', 'module')
    ->condition('name', drupal_get_profile())
    ->execute();

  // Cache a fully-built schema.
  drupal_get_schema(NULL, TRUE);

  // Run cron to populate update status tables (if available) so that users
  // will be warned if they've installed an out of date Drupal version.
  // Will also trigger indexing of profile-supplied content or feeds.
  drupal_cron_run();
  variable_set('features_rebuild_on_flush', TRUE);

  return $output;
}

/**
 * Form callback for additional options install task.
 */
function collabco_install_additional_options() {

  set_time_limit(0);

  $form = array();
  drupal_set_title('Additional options');

  $form['default_content'] = array(
    '#type' => 'fieldset',
    '#title' => st('Example content'),
  );

  $form['default_content']['install'] = array(
    '#type' => 'checkbox',
    '#title' => st('Install example content'),
    '#default_value' => array(1),
    '#attributes' => array('checked' => 'checked'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => st('Continue'),
  );

  return $form;
}


/**
 * Submit handler.
 *
 * @ingroup forms
 */
function collabco_install_additional_options_submit(&$form, &$form_state) {

  // If user selects to install default content. Set var.
  if ($form_state['values']['install']) {
    variable_set('collabco_example_content_batch', TRUE);
  }

  return FALSE;
}

/**
 * Returns modules and functions to install default/example content.
 */
function collabco_default_content() {
  return array(
    0 => array(
      'title' => st('Default Challenges'),
      'type' => 'function',
      'key' => '_govims_default_challenges',
    ),
    1 => array(
      'title' => st('Ideas'),
      'type' => 'module',
      'key' => 'collabco_content_idea',
    ),
    2 => array(
      'title' => st('Collaborations'),
      'type' => 'module',
      'key' => 'collabco_content_collaboration',
    ),
   3 => array(
     'title' => st('Featured Collaborations'),
     'type' => 'function',
     'key' => '_govims_featured_collaborations',
   ), 
  );

}

/**
 * Function to create featured_collaborations nodequeue
 * Add some collaborations
 */
function _govims_featured_collaborations() {
    
    if (!nodequeue_load_queue_by_name('featured_collaborations')) {
    $nodequeue = new stdClass();
    $nodequeue->api_version = 2;
    $nodequeue->name = 'featured_collaborations';
    $nodequeue->title = 'Featured Collaborations';
    $nodequeue->subqueue_title = '';
    $nodequeue->size =0;
    $nodequeue->link = 'Add to Featured Collaborations';
    $nodequeue->link_remove = 'Remove from Featured Collaborations';
    $nodequeue->owner = 'nodequeue';
    $nodequeue->show_in_ui = 1;
    $nodequeue->show_in_tab = 1;
    $nodequeue->show_in_links = 1;
    $nodequeue->reference = '0';
    $nodequeue->reverse = 1;
    $nodequeue->i18n = 0;
    $nodequeue->roles = array();
     
    $nodequeue->types = array(
      0 => 'hub',
    );
   // nodequeue_save($nodequeue);
 
    // Add subqueue, using qid.
    $nodequeue->add_subqueue = array(
      1 => 'Featured Collaborations',
     );
    nodequeue_save($nodequeue);
  }
    
 $query = db_select('node', 'n');
 $query->join('field_data_field_parked_collaboration', 'pc', 'pc.entity_id = n.nid');
 $query->join('field_data_field_turn_into_project', 'tp', 'tp.entity_id = n.nid');
 $result = $query
    ->fields('n', array('nid'))
    ->condition('n.type', 'hub', '=')
    ->condition('field_parked_collaboration_value','1','<>')
    ->condition('field_turn_into_project_value','1','<>')
    ->execute()->fetchAll();
  foreach ($result as $record) {
    nodequeue_queue_add('featured_collaborations',intval($record->nid));
  }
  
    
}

/**
 *  Function to add default challenge terms to Challenge Taxonomy.
 *  Add then to open_challenges term_queue
 */
function _govims_default_challenges() {
    
// List of terms for insert.
  $terms = array(
    t('Brainstorm'),
    t('Name this site'),
   );

  $term_images = array('challenge_one.jpg','challenge_two.jpg');
  $term_short_desc = array("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam porttitor aliquam velit eu blandit. Suspendisse volutpat imperdiet tellus at pulvinar.","Aliquam vel purus sapien. Ut interdum malesuada nisi elementum congue. Nunc et dui eros. Maecenas augue purus, sollicitudin tincidunt diam ac, vulputate rutrum ipsum.");
  $term_detailed_desc = array("Sed tincidunt fermentum justo non sollicitudin. Cras eget sem vitae magna ultricies accumsan sollicitudin ut eros. Donec vehicula pharetra condimentum. Donec maximus, felis sed sodales tempor, ligula turpis pellentesque mi, eget suscipit sem purus sit amet purus. Suspendisse potenti. Etiam scelerisque convallis posuere. Aenean hendrerit ornare varius. Etiam nec enim in purus pretium condimentum ac et lacus. Maecenas ac tempor turpis. Nunc a ullamcorper metus. Duis tristique, nisi at tincidunt egestas, nisi mi condimentum erat, sed dapibus quam lectus non lorem.","In eu placerat quam. Phasellus ultricies suscipit finibus. Sed convallis lobortis enim nec scelerisque. Fusce sit amet rhoncus nisl. Quisque ullamcorper bibendum mauris, sed aliquam enim sollicitudin non. Etiam vel tristique velit. Donec non volutpat tortor. In efficitur luctus tristique. Quisque consectetur massa libero, at laoreet ex pharetra ut. Sed eget tempus mauris, vel consectetur magna. Aenean nisi quam, consequat porta fringilla a, commodo ut erat. Aliquam porta dui quis risus gravida, non laoreet nibh vulputate.
    ");
  $vocabs = taxonomy_vocabulary_get_names();
  if (empty($vocabs['challenge'])) {
    return;
  }
 $queue =array(
 'machine_name' => 'open_challenges',
 'title' => 'Open challenges',
 'description' =>'Open challenges queue',
 'vid_machine_name' => 'challenge',
 );
 
 term_queue_save($queue);
 $queue = term_queue_load('open_challenges');
// Save taxonomy terms.
  $vid = $vocabs['challenge']->vid;
  $tids = array();
  $i=0;
  foreach ($terms as $name) {
    $term = new stdClass();
    $term->name = $name;
    $term->vid = $vid;  
   // $term->field_tag_line[LANGUAGE_NONE][0][value] = $term_short_desc[$i]; 
    $term->description = $term_detailed_desc[$i];
   //	$term->field_start_date[LANGUAGE_NONE][0][value][date] = "26/09/2016";
   //	$term->field_start_date[LANGUAGE_NONE][0][value][time] = "16:45";
    $term->vocabulary_machine_name = 'challenge';

    $theme_path = drupal_get_path('theme', variable_get('theme_default', NULL));
    $source_file = $theme_path."/assets/img/challenge/".$term_images[$i];
    $destination_file = variable_get('file_public_path', conf_path() . '/files')."/".$term_images[$i];  
  
    $result = copy($source_file, $destination_file);
	$dir = dirname($destination_file); 
	$file_name = basename($destination_file);
	$match = file_scan_directory($dir,  '/' . $file_name . '/', $options = array(), $depth = 0);

	if (!empty($match)) {
	  $file = reset($match); //if there is only one file
	  $uri = 'public://'.$file_name; 
	  $file->uid = 1;
	  $file->status = FILE_STATUS_PERMANENT;

      $file = file_save($file);
	  // Update the term with the new field data.
	  $term->field_challenge_image = array(
        LANGUAGE_NONE => array(
          array(
            'fid' => $file->fid,
          ),
        ),
      );
	}
    $i++;
    taxonomy_term_save($term);
    term_queue_add_term($queue->qid,$term->tid);
    $tids[] = $term->tid;
  }
  // Save the tids.
  variable_set('govims_challenges_saved', $tids);
}


/**
 * Sets the Batch API array for batch processing.
 */
function collabco_example_content_install() {

  $operations = array();

  $steps = collabco_default_content();
  foreach ($steps as $content) {
    $operations[] = array(
      'collabco_example_content_install_batch',
      array(
        $content['type'],
        $content['key'],
        $content['title'],
        isset($content['message']) ? $content['message'] : '',
      ),
    );
  }

  $batch = array(
    'operations' => $operations,
    'title' => st('Processing example content'),
    'init_message' => st('Initializing'),
    'error_message' => st('Error'),
    'finished' => 'collabco_example_content_install_finished',
  );

  return $batch;
}

/**
 * Either enable module or run function for Example content batch install.
 *
 * @param string $type
 *   Type of content either 'module' or 'function'.
 * @param string $key
 *   Name of module or function to enable/run.
 * @param string $name
 *   Title/name of the module or function.
 * @param string $message
 *   Optional message to be output with function.
 * @param array $context
 *   Batch context data.
 */
function collabco_example_content_install_batch($type, $key, $name, $message, &$context) {
  if ($type == 'module') {
    module_enable(array($key), FALSE);
    $context['results'][] = $key;
    $context['message'] = st('Enabled %module content.', array('%module' => $name));
  }
  elseif ($type == 'function') {
    call_user_func($key);
    $context['results'][] = $key;
    if ($message) {
      $context['message'] = $message;
    }
  }
}

/**
 * Performs any cleanup and output on completion of example content batch.
 */
function collabco_example_content_install_finished($context) {

  drupal_set_message('Example content installed.');
  
}


/**
 * Run any cleanup or other functions required after install is finished.
 */
function collabco_cleanup() {

    // Required by view_unpublished module.
  node_access_rebuild();

  cache_clear_all();

}

/**
 * Force-set a theme at any point during the execution of the request.
 *
 * Drupal doesn't give us the option to set the theme during the installation
 * process and forces enable the maintenance theme too early in the request
 * for us to modify it in a clean way.
 *
 * 
 *  */
function _collabco_set_theme($target_theme) {
  if ($GLOBALS['theme'] != $target_theme) {
    unset($GLOBALS['theme']);

    drupal_static_reset();
    $GLOBALS['conf']['maintenance_theme'] = $target_theme;
    _drupal_maintenance_theme();
  }
}





